buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://geonet.artifactoryonline.com/geonet/public-releases'
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
        classpath 'nz.org.geonet:gradle-build-version-plugin:1.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'build-version'

buildVersion {
    releaseTagPattern = "^v(\\d+\\.\\d+\\.\\d+)"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'net.thucydides.maven.plugins'
version = buildVersion.version

repositories {
    mavenLocal()
    jcenter()
}

ext {
    bintrayBaseUrl = 'https://api.bintray.com/maven'
    bintrayRepository = 'maven'
    bintrayPackage = 'thucydides-core-libraries'
    projectDescription = 'Thucydides core libraries'
    if (!project.hasProperty("bintrayUsername")) {
        bintrayUsername = 'wakaleo'
    }
    if (!project.hasProperty("bintrayApiKey")) {
        bintrayApiKey = ''
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

dependencies {
    compile "net.thucydides:thucydides-core:${buildVersion.version}"

    compile "org.apache.maven:maven-plugin-api:3.2.3"
    compile "org.apache.maven.reporting:maven-reporting-api:3.0"
    compile "org.apache.maven:maven-core:3.0.4"
    compile 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.3'

    testCompile "ch.qos.logback:logback-classic:1.0.13"
    testCompile "junit:junit:4.11"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile('org.mockito:mockito-all:1.10.8') {
        exclude group: "org.hamcrest"
    }
    testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
        exclude group: "junit"
    }
    testCompile("com.github.goldin:spock-extensions:0.1.4") {
        exclude module: "spock-core"
    }
    testCompile("org.codehaus.groovy:groovy-all:2.3.3")
    testCompile("org.easytesting:fest-assert:1.4")
}

task pluginDescriptor(type: Exec) {
    commandLine 'mvn', '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.3:descriptor'
    doFirst {
        final File pom = project.file('pom.xml')
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not created"

        pom.text = pom.text.
                replace('<groupId>unknown</groupId>', "<groupId>${project.group}</groupId>").
                replace('<artifactId>empty-project</artifactId>', "<artifactId>${project.name}</artifactId>").
                replace('<version>0</version>', """
                                                              |<version>${version}</version>
                                                              |  <packaging>maven-plugin</packaging>
                                                              |  <build>
                                                              |    <directory>\${project.basedir}/build</directory>
                                                              |    <outputDirectory>\${project.build.directory}/classes/main</outputDirectory>
                                                              |  </build>
                                                              |""".stripMargin().trim())
    }
    doLast {
        final pluginDescriptor = new File((File) project.compileGroovy.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}

project.compileJava.doLast { pluginDescriptor.execute() }

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            println "Publishing $project.name:$project.group:$project.version"

            from components.java

            artifact sourcesJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name "$project.name"
                    description "$projectDescription"
                    packaging 'maven-plugin'

                    url 'https://github.com/thucydides-webtests/$project.name'
                    scm {
                        url 'scm:git:git@github.com:thucydides-webtests/$project.name.git'
                        connection 'scm:git:git@github.com:thucydides-webtests/$project.name.git'
                        developerConnection 'scm:git:git@github.com:thucydides-webtests/$project.name.git'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'johnsmart'
                            name 'John Ferguson Smart'
                            email 'john.smart@wakaleo.com'
                        }
                    }
                }
                // Preserve compile-scope dependencies
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:-options"
}

bintray {
    user = bintrayUsername //this usually comes form gradle.properties file in ~/.gradle
    key = bintrayApiKey //this usually comes form gradle.properties file in ~/.gradle
    publications = ['mavenJava'] // see publications closure
    pkg {
        repo = 'maven'
        userOrg = 'thucydides'
        name = 'thucydides-core-libraries'
        desc = 'Thucydides core libraries'
        licenses = ['Apache-2.0']
        labels = ['thucydides','bdd']
    }
}